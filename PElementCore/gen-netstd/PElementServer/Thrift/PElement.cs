/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace PElementServer.Thrift
{

  public partial class PElement : TBase
  {
    private string _Name;
    private string _Appearance;
    private double? _AtomicMass;
    private double? _Boil;
    private string _Category;
    private double? _Density;
    private string _DiscoveredBy;
    private double? _Melt;
    private double? _MolarHeat;
    private string _NamedBy;
    private short _Number;
    private short _Period;
    private string _Phase;
    private string _Source;
    private string _Summary;
    private string _Symbol;
    private List<double> _IonizationEnergies;
    private double? _ElectronAffinity;
    private string _ElectronConfiguration;
    private double? _ElectronegativityPaulimg;

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public string Appearance
    {
      get
      {
        return _Appearance;
      }
      set
      {
        __isset.Appearance = true;
        this._Appearance = value;
      }
    }

    public double? AtomicMass
    {
      get
      {
        return _AtomicMass;
      }
      set
      {
        __isset.AtomicMass = true;
        this._AtomicMass = value;
      }
    }

    public double? Boil
    {
      get
      {
        return _Boil;
      }
      set
      {
        __isset.Boil = true;
        this._Boil = value;
      }
    }

    public string Category
    {
      get
      {
        return _Category;
      }
      set
      {
        __isset.Category = true;
        this._Category = value;
      }
    }

    public double? Density
    {
      get
      {
        return _Density;
      }
      set
      {
        __isset.Density = true;
        this._Density = value;
      }
    }

    public string DiscoveredBy
    {
      get
      {
        return _DiscoveredBy;
      }
      set
      {
        __isset.DiscoveredBy = true;
        this._DiscoveredBy = value;
      }
    }

    public double? Melt
    {
      get
      {
        return _Melt;
      }
      set
      {
        __isset.Melt = true;
        this._Melt = value;
      }
    }

    public double? MolarHeat
    {
      get
      {
        return _MolarHeat;
      }
      set
      {
        __isset.MolarHeat = true;
        this._MolarHeat = value;
      }
    }

    public string NamedBy
    {
      get
      {
        return _NamedBy;
      }
      set
      {
        __isset.NamedBy = true;
        this._NamedBy = value;
      }
    }

    public short Number
    {
      get
      {
        return _Number;
      }
      set
      {
        __isset.Number = true;
        this._Number = value;
      }
    }

    public short Period
    {
      get
      {
        return _Period;
      }
      set
      {
        __isset.Period = true;
        this._Period = value;
      }
    }

    public string Phase
    {
      get
      {
        return _Phase;
      }
      set
      {
        __isset.Phase = true;
        this._Phase = value;
      }
    }

    public string Source
    {
      get
      {
        return _Source;
      }
      set
      {
        __isset.Source = true;
        this._Source = value;
      }
    }

    public string Summary
    {
      get
      {
        return _Summary;
      }
      set
      {
        __isset.Summary = true;
        this._Summary = value;
      }
    }

    public string Symbol
    {
      get
      {
        return _Symbol;
      }
      set
      {
        __isset.Symbol = true;
        this._Symbol = value;
      }
    }

    public List<double> IonizationEnergies
    {
      get
      {
        return _IonizationEnergies;
      }
      set
      {
        __isset.IonizationEnergies = true;
        this._IonizationEnergies = value;
      }
    }

    public double? ElectronAffinity
    {
      get
      {
        return _ElectronAffinity;
      }
      set
      {
        __isset.ElectronAffinity = true;
        this._ElectronAffinity = value;
      }
    }

    public string ElectronConfiguration
    {
      get
      {
        return _ElectronConfiguration;
      }
      set
      {
        __isset.ElectronConfiguration = true;
        this._ElectronConfiguration = value;
      }
    }

    public double? ElectronegativityPaulimg
    {
      get
      {
        return _ElectronegativityPaulimg;
      }
      set
      {
        __isset.ElectronegativityPaulimg = true;
        this._ElectronegativityPaulimg = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool Name;
      public bool Appearance;
      public bool AtomicMass;
      public bool Boil;
      public bool Category;
      public bool Density;
      public bool DiscoveredBy;
      public bool Melt;
      public bool MolarHeat;
      public bool NamedBy;
      public bool Number;
      public bool Period;
      public bool Phase;
      public bool Source;
      public bool Summary;
      public bool Symbol;
      public bool IonizationEnergies;
      public bool ElectronAffinity;
      public bool ElectronConfiguration;
      public bool ElectronegativityPaulimg;
    }

    public PElement()
    {
    }

    public PElement DeepCopy()
    {
      var tmp0 = new PElement();
      if((Name != null) && __isset.Name)
      {
        tmp0.Name = this.Name;
      }
      tmp0.__isset.Name = this.__isset.Name;
      if((Appearance != null) && __isset.Appearance)
      {
        tmp0.Appearance = this.Appearance;
      }
      tmp0.__isset.Appearance = this.__isset.Appearance;
      if(__isset.AtomicMass)
      {
        tmp0.AtomicMass = this.AtomicMass;
      }
      tmp0.__isset.AtomicMass = this.__isset.AtomicMass;
      if(__isset.Boil)
      {
        tmp0.Boil = this.Boil;
      }
      tmp0.__isset.Boil = this.__isset.Boil;
      if((Category != null) && __isset.Category)
      {
        tmp0.Category = this.Category;
      }
      tmp0.__isset.Category = this.__isset.Category;
      if(__isset.Density)
      {
        tmp0.Density = this.Density;
      }
      tmp0.__isset.Density = this.__isset.Density;
      if((DiscoveredBy != null) && __isset.DiscoveredBy)
      {
        tmp0.DiscoveredBy = this.DiscoveredBy;
      }
      tmp0.__isset.DiscoveredBy = this.__isset.DiscoveredBy;
      if(__isset.Melt)
      {
        tmp0.Melt = this.Melt;
      }
      tmp0.__isset.Melt = this.__isset.Melt;
      if(__isset.MolarHeat)
      {
        tmp0.MolarHeat = this.MolarHeat;
      }
      tmp0.__isset.MolarHeat = this.__isset.MolarHeat;
      if((NamedBy != null) && __isset.NamedBy)
      {
        tmp0.NamedBy = this.NamedBy;
      }
      tmp0.__isset.NamedBy = this.__isset.NamedBy;
      if(__isset.Number)
      {
        tmp0.Number = this.Number;
      }
      tmp0.__isset.Number = this.__isset.Number;
      if(__isset.Period)
      {
        tmp0.Period = this.Period;
      }
      tmp0.__isset.Period = this.__isset.Period;
      if((Phase != null) && __isset.Phase)
      {
        tmp0.Phase = this.Phase;
      }
      tmp0.__isset.Phase = this.__isset.Phase;
      if((Source != null) && __isset.Source)
      {
        tmp0.Source = this.Source;
      }
      tmp0.__isset.Source = this.__isset.Source;
      if((Summary != null) && __isset.Summary)
      {
        tmp0.Summary = this.Summary;
      }
      tmp0.__isset.Summary = this.__isset.Summary;
      if((Symbol != null) && __isset.Symbol)
      {
        tmp0.Symbol = this.Symbol;
      }
      tmp0.__isset.Symbol = this.__isset.Symbol;
      if((IonizationEnergies != null) && __isset.IonizationEnergies)
      {
        tmp0.IonizationEnergies = this.IonizationEnergies.DeepCopy();
      }
      tmp0.__isset.IonizationEnergies = this.__isset.IonizationEnergies;
      if(__isset.ElectronAffinity)
      {
        tmp0.ElectronAffinity = this.ElectronAffinity;
      }
      tmp0.__isset.ElectronAffinity = this.__isset.ElectronAffinity;
      if((ElectronConfiguration != null) && __isset.ElectronConfiguration)
      {
        tmp0.ElectronConfiguration = this.ElectronConfiguration;
      }
      tmp0.__isset.ElectronConfiguration = this.__isset.ElectronConfiguration;
      if(__isset.ElectronegativityPaulimg)
      {
        tmp0.ElectronegativityPaulimg = this.ElectronegativityPaulimg;
      }
      tmp0.__isset.ElectronegativityPaulimg = this.__isset.ElectronegativityPaulimg;
      return tmp0;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Appearance = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Double)
              {
                AtomicMass = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Double)
              {
                Boil = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Category = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Double)
              {
                Density = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.String)
              {
                DiscoveredBy = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.Double)
              {
                Melt = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.Double)
              {
                MolarHeat = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.String)
              {
                NamedBy = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.I16)
              {
                Number = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.I16)
              {
                Period = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.String)
              {
                Phase = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 14:
              if (field.Type == TType.String)
              {
                Source = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 15:
              if (field.Type == TType.String)
              {
                Summary = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 16:
              if (field.Type == TType.String)
              {
                Symbol = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 17:
              if (field.Type == TType.List)
              {
                {
                  TList _list1 = await iprot.ReadListBeginAsync(cancellationToken);
                  IonizationEnergies = new List<double>(_list1.Count);
                  for(int _i2 = 0; _i2 < _list1.Count; ++_i2)
                  {
                    double _elem3;
                    _elem3 = await iprot.ReadDoubleAsync(cancellationToken);
                    IonizationEnergies.Add(_elem3);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 18:
              if (field.Type == TType.Double)
              {
                ElectronAffinity = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 19:
              if (field.Type == TType.String)
              {
                ElectronConfiguration = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 20:
              if (field.Type == TType.Double)
              {
                ElectronegativityPaulimg = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("PElement");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if((Name != null) && __isset.Name)
        {
          field.Name = "Name";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Appearance != null) && __isset.Appearance)
        {
          field.Name = "Appearance";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Appearance, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.AtomicMass)
        {
          field.Name = "AtomicMass";
          field.Type = TType.Double;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(AtomicMass ?? 0, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.Boil)
        {
          field.Name = "Boil";
          field.Type = TType.Double;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(Boil ?? 0, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Category != null) && __isset.Category)
        {
          field.Name = "Category";
          field.Type = TType.String;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Category, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.Density)
        {
          field.Name = "Density";
          field.Type = TType.Double;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(Density ?? 0, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((DiscoveredBy != null) && __isset.DiscoveredBy)
        {
          field.Name = "DiscoveredBy";
          field.Type = TType.String;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(DiscoveredBy, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.Melt)
        {
          field.Name = "Melt";
          field.Type = TType.Double;
          field.ID = 8;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(Melt ?? 0, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.MolarHeat)
        {
          field.Name = "MolarHeat";
          field.Type = TType.Double;
          field.ID = 9;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(MolarHeat ?? 0, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((NamedBy != null) && __isset.NamedBy)
        {
          field.Name = "NamedBy";
          field.Type = TType.String;
          field.ID = 10;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(NamedBy, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.Number)
        {
          field.Name = "Number";
          field.Type = TType.I16;
          field.ID = 11;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(Number, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.Period)
        {
          field.Name = "Period";
          field.Type = TType.I16;
          field.ID = 12;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(Period, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Phase != null) && __isset.Phase)
        {
          field.Name = "Phase";
          field.Type = TType.String;
          field.ID = 13;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Phase, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Source != null) && __isset.Source)
        {
          field.Name = "Source";
          field.Type = TType.String;
          field.ID = 14;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Source, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Summary != null) && __isset.Summary)
        {
          field.Name = "Summary";
          field.Type = TType.String;
          field.ID = 15;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Summary, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Symbol != null) && __isset.Symbol)
        {
          field.Name = "Symbol";
          field.Type = TType.String;
          field.ID = 16;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Symbol, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((IonizationEnergies != null) && __isset.IonizationEnergies)
        {
          field.Name = "IonizationEnergies";
          field.Type = TType.List;
          field.ID = 17;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Double, IonizationEnergies.Count), cancellationToken);
            foreach (double? _iter4 in IonizationEnergies)
            {
              await oprot.WriteDoubleAsync(_iter4 ?? 0, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.ElectronAffinity)
        {
          field.Name = "ElectronAffinity";
          field.Type = TType.Double;
          field.ID = 18;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(ElectronAffinity ?? 0, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ElectronConfiguration != null) && __isset.ElectronConfiguration)
        {
          field.Name = "ElectronConfiguration";
          field.Type = TType.String;
          field.ID = 19;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ElectronConfiguration, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.ElectronegativityPaulimg)
        {
          field.Name = "ElectronegativityPaulimg";
          field.Type = TType.Double;
          field.ID = 20;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(ElectronegativityPaulimg ?? 0, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is PElement other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.Name == other.__isset.Name) && ((!__isset.Name) || (System.Object.Equals(Name, other.Name))))
        && ((__isset.Appearance == other.__isset.Appearance) && ((!__isset.Appearance) || (System.Object.Equals(Appearance, other.Appearance))))
        && ((__isset.AtomicMass == other.__isset.AtomicMass) && ((!__isset.AtomicMass) || (System.Object.Equals(AtomicMass, other.AtomicMass))))
        && ((__isset.Boil == other.__isset.Boil) && ((!__isset.Boil) || (System.Object.Equals(Boil, other.Boil))))
        && ((__isset.Category == other.__isset.Category) && ((!__isset.Category) || (System.Object.Equals(Category, other.Category))))
        && ((__isset.Density == other.__isset.Density) && ((!__isset.Density) || (System.Object.Equals(Density, other.Density))))
        && ((__isset.DiscoveredBy == other.__isset.DiscoveredBy) && ((!__isset.DiscoveredBy) || (System.Object.Equals(DiscoveredBy, other.DiscoveredBy))))
        && ((__isset.Melt == other.__isset.Melt) && ((!__isset.Melt) || (System.Object.Equals(Melt, other.Melt))))
        && ((__isset.MolarHeat == other.__isset.MolarHeat) && ((!__isset.MolarHeat) || (System.Object.Equals(MolarHeat, other.MolarHeat))))
        && ((__isset.NamedBy == other.__isset.NamedBy) && ((!__isset.NamedBy) || (System.Object.Equals(NamedBy, other.NamedBy))))
        && ((__isset.Number == other.__isset.Number) && ((!__isset.Number) || (System.Object.Equals(Number, other.Number))))
        && ((__isset.Period == other.__isset.Period) && ((!__isset.Period) || (System.Object.Equals(Period, other.Period))))
        && ((__isset.Phase == other.__isset.Phase) && ((!__isset.Phase) || (System.Object.Equals(Phase, other.Phase))))
        && ((__isset.Source == other.__isset.Source) && ((!__isset.Source) || (System.Object.Equals(Source, other.Source))))
        && ((__isset.Summary == other.__isset.Summary) && ((!__isset.Summary) || (System.Object.Equals(Summary, other.Summary))))
        && ((__isset.Symbol == other.__isset.Symbol) && ((!__isset.Symbol) || (System.Object.Equals(Symbol, other.Symbol))))
        && ((__isset.IonizationEnergies == other.__isset.IonizationEnergies) && ((!__isset.IonizationEnergies) || (TCollections.Equals(IonizationEnergies, other.IonizationEnergies))))
        && ((__isset.ElectronAffinity == other.__isset.ElectronAffinity) && ((!__isset.ElectronAffinity) || (System.Object.Equals(ElectronAffinity, other.ElectronAffinity))))
        && ((__isset.ElectronConfiguration == other.__isset.ElectronConfiguration) && ((!__isset.ElectronConfiguration) || (System.Object.Equals(ElectronConfiguration, other.ElectronConfiguration))))
        && ((__isset.ElectronegativityPaulimg == other.__isset.ElectronegativityPaulimg) && ((!__isset.ElectronegativityPaulimg) || (System.Object.Equals(ElectronegativityPaulimg, other.ElectronegativityPaulimg))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Name != null) && __isset.Name)
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        if((Appearance != null) && __isset.Appearance)
        {
          hashcode = (hashcode * 397) + Appearance.GetHashCode();
        }
        if(__isset.AtomicMass)
        {
          hashcode = (hashcode * 397) + AtomicMass.GetHashCode();
        }
        if(__isset.Boil)
        {
          hashcode = (hashcode * 397) + Boil.GetHashCode();
        }
        if((Category != null) && __isset.Category)
        {
          hashcode = (hashcode * 397) + Category.GetHashCode();
        }
        if(__isset.Density)
        {
          hashcode = (hashcode * 397) + Density.GetHashCode();
        }
        if((DiscoveredBy != null) && __isset.DiscoveredBy)
        {
          hashcode = (hashcode * 397) + DiscoveredBy.GetHashCode();
        }
        if(__isset.Melt)
        {
          hashcode = (hashcode * 397) + Melt.GetHashCode();
        }
        if(__isset.MolarHeat)
        {
          hashcode = (hashcode * 397) + MolarHeat.GetHashCode();
        }
        if((NamedBy != null) && __isset.NamedBy)
        {
          hashcode = (hashcode * 397) + NamedBy.GetHashCode();
        }
        if(__isset.Number)
        {
          hashcode = (hashcode * 397) + Number.GetHashCode();
        }
        if(__isset.Period)
        {
          hashcode = (hashcode * 397) + Period.GetHashCode();
        }
        if((Phase != null) && __isset.Phase)
        {
          hashcode = (hashcode * 397) + Phase.GetHashCode();
        }
        if((Source != null) && __isset.Source)
        {
          hashcode = (hashcode * 397) + Source.GetHashCode();
        }
        if((Summary != null) && __isset.Summary)
        {
          hashcode = (hashcode * 397) + Summary.GetHashCode();
        }
        if((Symbol != null) && __isset.Symbol)
        {
          hashcode = (hashcode * 397) + Symbol.GetHashCode();
        }
        if((IonizationEnergies != null) && __isset.IonizationEnergies)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(IonizationEnergies);
        }
        if(__isset.ElectronAffinity)
        {
          hashcode = (hashcode * 397) + ElectronAffinity.GetHashCode();
        }
        if((ElectronConfiguration != null) && __isset.ElectronConfiguration)
        {
          hashcode = (hashcode * 397) + ElectronConfiguration.GetHashCode();
        }
        if(__isset.ElectronegativityPaulimg)
        {
          hashcode = (hashcode * 397) + ElectronegativityPaulimg.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("PElement(");
      int tmp5 = 0;
      if((Name != null) && __isset.Name)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("Name: ");
        Name.ToString(sb);
      }
      if((Appearance != null) && __isset.Appearance)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("Appearance: ");
        Appearance.ToString(sb);
      }
      if(__isset.AtomicMass)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("AtomicMass: ");
        AtomicMass.ToString(sb);
      }
      if(__isset.Boil)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("Boil: ");
        Boil.ToString(sb);
      }
      if((Category != null) && __isset.Category)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("Category: ");
        Category.ToString(sb);
      }
      if(__isset.Density)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("Density: ");
        Density.ToString(sb);
      }
      if((DiscoveredBy != null) && __isset.DiscoveredBy)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("DiscoveredBy: ");
        DiscoveredBy.ToString(sb);
      }
      if(__isset.Melt)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("Melt: ");
        Melt.ToString(sb);
      }
      if(__isset.MolarHeat)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("MolarHeat: ");
        MolarHeat.ToString(sb);
      }
      if((NamedBy != null) && __isset.NamedBy)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("NamedBy: ");
        NamedBy.ToString(sb);
      }
      if(__isset.Number)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("Number: ");
        Number.ToString(sb);
      }
      if(__isset.Period)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("Period: ");
        Period.ToString(sb);
      }
      if((Phase != null) && __isset.Phase)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("Phase: ");
        Phase.ToString(sb);
      }
      if((Source != null) && __isset.Source)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("Source: ");
        Source.ToString(sb);
      }
      if((Summary != null) && __isset.Summary)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("Summary: ");
        Summary.ToString(sb);
      }
      if((Symbol != null) && __isset.Symbol)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("Symbol: ");
        Symbol.ToString(sb);
      }
      if((IonizationEnergies != null) && __isset.IonizationEnergies)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("IonizationEnergies: ");
        IonizationEnergies.ToString(sb);
      }
      if(__isset.ElectronAffinity)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("ElectronAffinity: ");
        ElectronAffinity.ToString(sb);
      }
      if((ElectronConfiguration != null) && __isset.ElectronConfiguration)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("ElectronConfiguration: ");
        ElectronConfiguration.ToString(sb);
      }
      if(__isset.ElectronegativityPaulimg)
      {
        if(0 < tmp5++) { sb.Append(", "); }
        sb.Append("ElectronegativityPaulimg: ");
        ElectronegativityPaulimg.ToString(sb);
      }
      sb.Append(')');
      return sb.ToString();
    }
  }

}
